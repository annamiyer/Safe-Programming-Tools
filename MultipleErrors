#include <stdio.h>
#include <string.h>
#include <stdlib.h>


/*Using uninitialized variables:*/
int main(void) { 
   int y;
   y+=5; 
   if(y>2) { 
        y = 0; 
   } 
   printf(" ... program done \n"); 
   return 0; 
}


/*Using undeclared memory:*/
int intArraySize = 10;
int i;
int* intArray, *intArray2;
/* dynamically declare some memory for our integer array */
intArray = (int *) malloc(intArraySize*sizeof(int));
/* loop over the array, and do some computations */
for(i=0; i<intArraySize; i++) {
intArray[i] = i;
}
printf(" ... program done \n");


/*Size 0 mallocs:*/
int main(void) { 
   int* buffer; 
   int size = 0; 
   buffer = (int* ) malloc(size*sizeof(int)); 
   return 0; 
}

/*Overflowing array bounds:*/
int main(void) { 
   int intArray[10] = {0,1,2,3,4,5,6,7,8,9}; 
   int i; 
/* loop over the array, and do some computations */ 
   for(i=0; i<10; i++) { 
       intArray[i+1] = i+1; 
   } 
   printf(" ... program done \n"); 
   return 0; 
}

/*Double freeing: A double free occurs when an already-freed pointer gets passed to free.*/
int main(void) {
  int intArraySize = 10;
  int i;
  int* intArray;
/* dynamically declare some memory for integer array */
  intArray = (int *) malloc(intArraySize*sizeof(int));
  for(i=0; i<intArraySize; i++) {
     intArray[i] = i;
  }
/* free mallocâ€™d memory and end program */
  free(intArray);
  free(intArray);
  printf(" ... program done \n");
  return 0;
}
